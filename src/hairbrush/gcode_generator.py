"""
G-code generation utilities for the hairbrush package.
"""

from .config import load_command_template


class GCodeGenerator:
    """Generator for G-code from SVG paths."""
    
    def __init__(self, template_name="default"):
        """
        Initialize the G-code generator.
        
        Args:
            template_name (str): Name of the command template to use
        """
        self.template = load_command_template(template_name)
        self.output_lines = []
        
    def add_header(self):
        """Add header G-code commands."""
        self.output_lines.extend([
            "; Hairbrush Dual-Airbrush Plotter G-code",
            "; Generated by Hairbrush",
            "G90 ; Set absolute positioning",
            "G21 ; Set units to millimeters",
            "G28 ; Home all axes",
            "M84 S0 ; Disable stepper timeout",
            ""
        ])
        
    def add_footer(self):
        """Add footer G-code commands."""
        self.output_lines.extend([
            "",
            "; End of G-code",
            "G0 Z10 ; Raise Z",
            "G0 X0 Y0 ; Return to origin",
            "M84 ; Disable motors"
        ])
        
    def add_brush_command(self, brush, command_type):
        """
        Add a brush command from the template.
        
        Args:
            brush (str): Brush identifier (e.g., 'brush_a')
            command_type (str): Command type (e.g., 'air_on', 'paint_on')
        """
        if brush in self.template and command_type in self.template[brush]:
            self.output_lines.append(self.template[brush][command_type])
        
    def add_move(self, x, y, z=None, feedrate=None, is_rapid=False):
        """
        Add a movement command.
        
        Args:
            x (float): X coordinate
            y (float): Y coordinate
            z (float, optional): Z coordinate
            feedrate (float, optional): Feedrate in mm/min
            is_rapid (bool): Whether to use rapid movement (G0)
        """
        command = "G0" if is_rapid else "G1"
        
        coords = []
        if x is not None:
            coords.append(f"X{x:.3f}")
        if y is not None:
            coords.append(f"Y{y:.3f}")
        if z is not None:
            coords.append(f"Z{z:.3f}")
            
        if feedrate is not None:
            coords.append(f"F{feedrate}")
            
        if coords:
            self.output_lines.append(f"{command} {' '.join(coords)}")
    
    def add_path(self, path_data, brush, z_height, feedrate):
        """
        Add G-code for a path.
        
        Args:
            path_data (str): SVG path data
            brush (str): Brush identifier (e.g., 'brush_a')
            z_height (float): Z height for the path
            feedrate (float): Feedrate in mm/min
        """
        # This is a placeholder for path processing
        # In a real implementation, this would parse the SVG path data
        # and convert it to a series of G-code movements
        self.output_lines.append(f"; Path: {path_data[:20]}...")
        self.output_lines.append(f"; Using brush: {brush}")
        self.output_lines.append(f"; Z height: {z_height}")
        self.output_lines.append(f"; Feedrate: {feedrate}")
        
        # Example implementation for a simple path
        # In reality, this would need to parse the SVG path commands
        self.add_brush_command(brush, "air_on")
        self.add_move(100, 100, z_height, feedrate)
        self.add_brush_command(brush, "paint_on")
        self.add_move(150, 150, z_height, feedrate)
        self.add_brush_command(brush, "paint_off")
        self.add_brush_command(brush, "air_off")
    
    def get_output(self):
        """
        Get the generated G-code.
        
        Returns:
            str: The complete G-code
        """
        return "\n".join(self.output_lines)
    
    def save_to_file(self, filename):
        """
        Save the G-code to a file.
        
        Args:
            filename (str): Output filename
        """
        with open(filename, "w") as f:
            f.write(self.get_output()) 